{"version":3,"sources":["constants.js","helper/index.js","context/index.js","components/TrackCard/index.jsx","pages/PlaylistPage/index.jsx","components/MediaPlayer/index.jsx","pages/PlayingPage/index.jsx","pages/HomePage/index.jsx","components/BottomNavigation/index.jsx","App.js","serviceWorker.js","index.js"],"names":["NAPSTER_API_KEY","getCurrentSongData","trackId","a","fetch","response","json","result","tracks","albumId","previewURL","artistName","name","console","log","thumbnailSrc","songSrc","getTopTracks","responseTracks","forEach","track","newItem","push","songContext","createContext","currentSong","setCurrentSong","SongProvider","children","initialSong","useState","Provider","value","useStyles","makeStyles","theme","root","display","marginBottom","details","flexDirection","content","flex","cover","width","objectFit","float","marginLeft","controls","minWidth","alignItems","paddingLeft","spacing","paddingBottom","TrackCard","useTheme","classes","useContext","Card","className","CardContent","Typography","component","variant","color","Button","startIcon","onClick","Link","to","CardMedia","image","Text","styled","h1","TrackList","map","index","key","PlaylistPage","React","setTracks","setIsLoading","useEffect","fetchTopTracks","MediaControlCard","style","marginTop","src","NoSongPlayed","PlayingPage","fetchSongDetails","HomePageWrapper","div","Header","Subtitle","HomePage","fontSize","navbar","backgroundColor","left","bottom","overflow","position","BottomNavigationComponent","setValue","BottomNavigation","onChange","event","newValue","handleChange","showLabels","BottomNavigationAction","label","icon","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9afe1680.chunk.js","sourcesContent":["// PENTING: Untuk variabel yang sensitif seperti API jangan taruh di file seperti ini dan di-commit dalam repository!\n// Taruh variabel untuk aplikasi di file .env\n// API dibawah adalah API contoh, silakan ganti dengan API masing-masing.\n\nexport const NAPSTER_API_KEY = \"ZTk2YjY4MjMtMDAzYy00MTg4LWE2MjYtZDIzNjJmMmM0YTdm\";","import { NAPSTER_API_KEY } from \"../constants\";\n\nexport const getCurrentSongData = async (trackId) => {\n  const response = await fetch(\n    `https://api.napster.com/v2.1/tracks/${trackId}?apikey=${NAPSTER_API_KEY}`\n  );\n  const result = await response.json();\n  const { albumId, previewURL, artistName, name } = await result.tracks[0];\n  console.log(result.tracks[0]);\n  return {\n    thumbnailSrc: `https://api.napster.com/imageserver/v2/albums/${albumId}/images/356x237.jpg`,\n    songSrc: previewURL,\n    name: name,\n    artistName: artistName,\n  };\n};\n\nexport const getTopTracks = async () => {\n    let tracks = [];\n    const response = await fetch(\n      `https://api.napster.com/v2.1/tracks/top?apikey=${NAPSTER_API_KEY}`\n    );\n    const { tracks: responseTracks } = await response.json();\n    await responseTracks.forEach(track => {\n        const newItem = {\n            thumbnailSrc: `https://api.napster.com/imageserver/v2/albums/${track.albumId}/images/356x237.jpg`,\n            name: track.name,\n            artistName: track.artistName,\n            trackId: track.trackId,\n            songSrc: track.previewURL,\n        }\n        tracks.push(newItem);\n    });\n    return tracks;\n  };\n","import React, {useState, createContext } from \"react\";\n\nexport const songContext = createContext({\n  currentSong:  {\n    thumbnailSrc: \"\",\n    songSrc: \"\",\n    name: \"\",\n    artistName: \"\",\n    trackId: \"\"\n  },\n  setCurrentSong: () => undefined,\n});\n\nexport const SongProvider = ({ children, initialSong }) => {\n  const [currentSong, setCurrentSong] = useState(initialSong);\n  return (\n    <songContext.Provider\n      value={{\n        currentSong,\n        setCurrentSong,\n      }}\n    >\n      {children}\n    </songContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { songContext } from \"../../context\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport PlayIcon from \"@material-ui/icons/PlayArrow\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    marginBottom: \"20px\",\n  },\n  details: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  content: {\n    flex: \"1 0 auto\",\n  },\n  cover: {\n    width: \"151px\",\n    objectFit: \"cover\",\n    float: \"right\",\n    marginLeft: \"auto\",\n  },\n  controls: {\n    display: \"flex\",\n    minWidth: \"50vw\",\n    alignItems: \"center\",\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n}));\n\nexport default function TrackCard({\n  name,\n  artistName,\n  thumbnailSrc,\n  trackId,\n  songSrc,\n}) {\n  const theme = useTheme();\n  const classes = useStyles(theme);\n  const { setCurrentSong } = useContext(songContext);\n\n  const handlePlay = () => {\n    setCurrentSong({ name, artistName, thumbnailSrc, trackId, songSrc });\n  };\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          <Typography component=\"h5\" variant=\"h5\">\n            {name}\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            {artistName}\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            startIcon={<PlayIcon />}\n            onClick={() => handlePlay()}\n            component={Link}\n            to=\"/playing\"\n          >\n            Play\n          </Button>\n        </CardContent>\n      </div>\n      <CardMedia className={classes.cover} image={thumbnailSrc} />\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { getTopTracks } from \"../../helper\";\nimport styled from \"styled-components\";\nimport TrackCard from \"../../components/TrackCard\";\n\nconst Text = styled.h1`\n  color: white;\n`;\n\nconst TrackList = ({ tracks }) => {\n  return tracks.map((track, index) => (\n    <TrackCard\n      name={track.name}\n      trackId={track.trackId}\n      thumbnailSrc={track.thumbnailSrc}\n      artistName={track.artistName}\n      songSrc={track.songSrc}\n      key={index}\n    />\n  ));\n};\n\nconst PlaylistPage = () => {\n  const [tracks, setTracks] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    async function fetchTopTracks() {\n      const result = await getTopTracks();\n      setTracks(result);\n    }\n    fetchTopTracks();\n    setIsLoading(false);\n  }, []);\n  return (\n    <div>\n      <Text>Playlist Page</Text>\n      <TrackList tracks={tracks} />\n    </div>\n  );\n};\n\nexport default PlaylistPage;\n","import React from \"react\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  details: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  content: {\n    flex: \"1 0 auto\",\n  },\n  cover: {\n    width: \"151px\",\n    objectFit: \"cover\",\n    float: \"right\",\n    marginLeft: \"auto\",\n  },\n  controls: {\n    display: \"flex\",\n    minWidth: \"50vw\",\n    alignItems: \"center\",\n    paddingLeft: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  },\n}));\n\nexport default function MediaControlCard({\n  name,\n  artistName,\n  thumbnailSrc,\n  songSrc,\n}) {\n  const theme = useTheme();\n  const classes = useStyles(theme);\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <div className={classes.details}>\n          <CardContent className={classes.content}>\n            <Typography component=\"h5\" variant=\"h5\">\n              {name}\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              {artistName}\n            </Typography>\n          </CardContent>\n        </div>\n        <CardMedia\n          className={classes.cover}\n          image={thumbnailSrc}\n          component=\"img\"\n        />\n      </Card>\n      <div style={{marginTop: '10px'}}>\n        <audio src={songSrc} controls style={{ width: \"100%\" }} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { songContext } from \"../../context\";\nimport { getCurrentSongData } from \"../../helper\";\nimport MediaPlayer from \"../../components/MediaPlayer\";\n\nconst Text = styled.h1`\n  color: white;\n`;\n\nconst NoSongPlayed = () => {\n  return <Text>No music played. Please choose music first at playlist!</Text>;\n};\n\nconst PlayingPage = () => {\n  const {currentSong, setCurrentSong} = React.useContext(songContext);\n\n  // Tra.446436784\n  React.useEffect(() => {\n    console.log('panggil')\n    async function fetchSongDetails() {\n      const {\n        thumbnailSrc,\n        name,\n        artistName,\n        songSrc,\n      } = await getCurrentSongData(currentSong.trackId);\n\n      console.log(songSrc);\n      setCurrentSong({\n        ...currentSong,\n        thumbnailSrc,\n        name,\n        artistName,\n        songSrc,\n      });\n    }\n    currentSong.trackId && fetchSongDetails();\n  }, [currentSong]);\n\n  return (\n    <div>\n      {(currentSong.trackId === '') && <NoSongPlayed />}\n      {(currentSong.trackId !== '') && (\n\n      <>\n      <Text>\n      Current Playing...\n    </Text>\n        <MediaPlayer\n          name={currentSong.name}\n          thumbnailSrc={currentSong.thumbnailSrc}\n          songSrc={currentSong.songSrc}\n          artistName={currentSong.artistName}\n        /></>\n      )}\n    </div>\n  );\n};\n\nexport default PlayingPage;\n","import React from \"react\";\nimport styled from 'styled-components';\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\n\nconst HomePageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-contents: center;\n  align-items: center;\n`;\n\nconst Header = styled.h1`\n  color: #DFE6E9;\n  text-align: center;\n`;\nconst Subtitle = styled.div`\n  color: #DFE6E9;\n`;\n\nconst HomePage = () => {\n  return <HomePageWrapper>\n    <MusicNoteIcon style={{ color: 'white', fontSize: '100px'}}/>\n    <Header>\n      Welcome to MyPlayer\n    </Header>\n    <Subtitle>\n      Play your favorite song here.\n    </Subtitle>\n  </HomePageWrapper>;\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\n\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\";\nimport HomeIcon from \"@material-ui/icons/Home\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100vw\",\n  },\n  content: {\n    color: \"#2D3436\",\n  },\n  navbar: {\n    backgroundColor: \"#DFE6E9\",\n    left: 0,\n    bottom: 0,\n    width: \"100%\",\n    overflow: \"hidden\",\n    position: \"fixed\"\n  },\n});\n\nconst BottomNavigationComponent = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(\"recents\");\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <BottomNavigation\n      value={value}\n      onChange={(event, newValue) => handleChange(event, newValue)}\n      className={classes.navbar}\n      showLabels\n    >\n      <BottomNavigationAction\n        component={Link}\n        to=\"/\"\n        label=\"Home\"\n        value=\"home\"\n        icon={<HomeIcon />}\n        className={classes.content}\n      />\n      <BottomNavigationAction\n        component={Link}\n        to=\"/playing\"\n        label=\"Playing\"\n        value=\"playing\"\n        icon={<PlayArrowIcon />}\n        className={classes.content}\n      />\n      <BottomNavigationAction\n        component={Link}\n        to=\"/playlist\"\n        label=\"Playlist\"\n        value=\"playlist\"\n        icon={<PlaylistPlayIcon />}\n        className={classes.content}\n      />\n    </BottomNavigation>\n  );\n};\n\nexport default BottomNavigationComponent;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport PlayistPage from \"./pages/PlaylistPage\";\nimport PlayingPage from \"./pages/PlayingPage\";\nimport HomePage from \"./pages/HomePage\";\nimport BottomNavigationComponent from \"./components/BottomNavigation\";\nimport { SongProvider } from \"./context\";\n\nfunction App() {\n  const initialState = {\n    thumbnailSrc: \"\",\n    songSrc: \"\",\n    name: \"\",\n    artistName: \"\",\n    trackId: \"\",\n  };\n  return (\n    <SongProvider initialSong={initialState}>\n      <Router>\n        <Switch>\n          <Route path=\"/playing\">\n            <PlayingPage />\n          </Route>\n          <Route path=\"/playlist\">\n            <PlayistPage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n        <BottomNavigationComponent />\n      </Router>\n    </SongProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}